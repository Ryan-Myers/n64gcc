name: Recompile gcc and publish releases

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix:
        os: [
          {
            name: linux,
            runner: ubuntu-latest
          },
          {
            name: macos,
            runner: macos-latest
          },
          # {
          #   name: windows,
          #   runner: windows-latest
          # },
          {
            name: linux-arm,
            runner: ubuntu-latest
          }
        ]
    name: Recompiling gcc for ${{ matrix.os.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Ubuntu
      - name: Install dependencies (Linux)
        shell: bash
        if: matrix.os.name == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build gcc binary (Linux)
        shell: bash
        if: matrix.os.name == 'linux'
        run: |
          ./build-gcc.sh

      - name: Install dependencies (Linux ARM64)
        shell: bash
        if: matrix.os.name == 'linux-arm'
        run: |
          sudo apt update
          sudo apt install gcc-aarch64-linux-gnu

      - name: Build gcc binary (Linux ARM64)
        shell: bash
        if: matrix.os.name == 'linux-arm'
        run: |
          ./build-gcc.sh

      # MacOS
      - name: Install dependencies (MacOS)
        shell: bash
        if: matrix.os.name == 'macos'
        run: |
          brew install make

      - name: Build gcc binary (MacOS)
        shell: bash
        if: matrix.os.name == 'macos'
        run: |
          ./build-gcc.sh

      # # Windows
      # - name: Install dependencies (Windows)
      #   uses: msys2/setup-msys2@v2
      #   if: matrix.os.name == 'windows'
      #   with:
      #     install: |-
      #       gcc
      #       mingw-w64-x86_64-gcc
      #       make

      # - name: Build gcc binary (Windows)
      #   shell: msys2 {0}
      #   if: matrix.os.name == 'windows'
      #   run: |-
      #     ./build-gcc.sh

      # - name: Run the build script (Windows)
      #   shell: cmd
      #   if: matrix.os.name == 'windows'
      #   run: |-
      #     set MSYSTEM=MSYS
      #     msys2 -c 'make --jobs RELEASE=1 VERSION=${{ matrix.ido }}'

      # Archive
      - name: Create release archive
        shell: bash
        run: |
          cd mips-n64-toolchain
          tar -czvf mips-n64-toolchain-${{ matrix.os.name }}.tar.gz *

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: mips-n64-toolchain-${{ matrix.os.name }}
          path: |
            mips-n64-toolchain-${{ matrix.os.name }}.tar.gz

      - name: Publish release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            mips-n64-toolchain-${{ matrix.os.name }}.tar.gz
